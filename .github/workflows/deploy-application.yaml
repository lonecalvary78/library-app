name: deploy-application

on:
   workflow_run:
      workflows: ["build-application"]
      types: [completed]

jobs:
  deploy-application:
    permissions:
        contents: read
        id-token: write
    runs-on: ubuntu-latest
    steps:
      - id: project-checkout
        uses: actions/checkout@v4
      - id: google-cloud-auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      - id: gke-get-authentication
        uses: google-github-actions/get-gke-credentials@v2
        with:
           cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
           location: ${{ secrets.GKE_LOCATION }}
      - id: deploy-db-secret
        run: |
            SECRET_NAME="db-secret"
            if kubectl get secret $SECRET_NAME  >/dev/null 2>&1; then
                echo "Secret $SECRET_NAME already exists"
                else
                echo "Creating secret $SECRET_NAME"
                kubectl create secret generic $SECRET_NAME \
                    --from-literal=host="${{ secrets.DB_HOST }}" \
                    --from-literal=port="${{ secrets.DB_PORT }}" \
                    --from-literal=database="${{ secrets.DB_NAME }}" \
                    --from-literal=username="${{ secrets.DB_USERNAME }}" \
                    --from-literal=password="${{ secrets.DB_PASSWORD }}"
                echo "Secret created successfully"
                fi
      
      - id: deploy-image-secret
        run: |
            IMAGE_SECRET_NAME="library-image-secret"
            REPO_SERVER="https://ghcr.io"
            if kubectl get secret $IMAGE_SECRET_NAME  >/dev/null 2>&1; then
                echo "Secret $IMAGE_SECRET_NAME already exists"
                else
                echo "Creating secret $IMAGE_SECRET_NAME"
                kubectl create secret docker-registry $IMAGE_SECRET_NAME \
                    --docker-server=$REPO_SERVER \
                    --docker-username="${{ github.actor }}" \
                    --docker-password="${{ secrets.GITHUB_TOKEN }}"
                echo "Secret created successfully"
                fi

